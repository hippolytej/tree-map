{"version":3,"sources":["components/treeLayer.jsx","components/button.jsx","components/treePopUp.jsx","components/drawer.jsx","components/map.jsx","App.js","serviceWorker.js","index.js"],"names":["TreeLayer","_this","this","treeIds","props","treeDict","react_default","a","createElement","lib_esm","type","id","layout","icon-image","map","onMouseEnter","onTreeHover","bind","onMouseLeave","onTreeEndHover","coordinates","geometry","onClick","onTreeClick","key","Component","withStyles","theme","button","margin","classes","Button_default","size","variant","className","text","TreePopUp","hoveredTree","onCloseButtonClick","onInfoButtonClick","isClicked","recordid","offset","style","overflowX","fontFamily","fontSize","marginTop","marginBottom","fields","libellefrancais","width","fontWeight","textAlign","genre","espece","dateplantation","substr","isMobile","display","flexDirection","components_button","TemporaryDrawer","Drawer_default","anchor","open","openDrawer","onClose","toggleDrawer","tabIndex","role","onKeyDown","wikiRow","treeImg","src","thumbnailUrl","alt","wikiTextContainer","wikiDesc","React","list","fullList","marginRight","float","marginLeft","Map","ReactMapboxGl","minZoom","maxZoom","accessToken","token","mapStyle","flyToOptions","speed","TreeMap","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onMapLoad","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","hoveredTreeID","_ref","getCanvas","cursor","setState","state","clickedTreeID","_ref2","console","log","treeId","keyword","wikiTreeData","TreeData","asyncToGenerator","regenerator_default","mark","_callee","ids","response","responseJson","maxNbTrees","i","wrap","_context","prev","next","fetch","sent","json","Math","min","parameters","rows","nhits","push","abrupt","records","nbTrees","stop","_ref4","_callee2","safeKeyword","urlBase","bestResultTitle","bestResultId","searchResponse","desc","descQueryResponse","descQueryJson","descPages","thumbnail","thumbQueryResponse","thumbQueryJson","_context2","split","join","concat","query","search","title","pageid","t0","pages","keys","extract","t1","source","t2","_x","apply","arguments","mapCenter","zoom","assertThisInitialized","onStyleLoad","center","containerStyle","height","treeLayer","treePopUp","drawer","leftDrawer","App","components_map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07a4f96b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Layer, Feature } from 'react-mapbox-gl';\n\nclass TreeLayer extends Component {\n    render() {\n        const treeIds = this.props.treeIds;\n        const treeDict = this.props.treeDict;\n        return (\n            <Layer\n                type=\"symbol\"\n                id={'trees'}\n                layout={{'icon-image': 'billy'}}>\n                {\n                    treeIds.map(id => (\n                        <Feature\n                            onMouseEnter={this.props.onTreeHover.bind(this, id)}\n                            onMouseLeave={this.props.onTreeEndHover.bind(this)}\n                            coordinates={treeDict[id].geometry.coordinates}\n                            onClick={this.props.onTreeClick.bind(null, id)}\n                            key={id}\n                        />\n                    ))\n                }\n            </Layer>\n        );\n    }\n}\n\nexport default TreeLayer;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst styles = theme => ({\n    button: {\n        margin: 5\n    }\n});\n\nfunction PopUpButton(props) {\n    const { classes } = props;\n    return (\n        <div>\n            <Button\n                size=\"small\"\n                variant=\"outlined\"\n                className={classes.button}\n                onClick={props.onClick}>\n                {props.text}\n            </Button>\n        </div>\n    );\n}\n\nPopUpButton.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(PopUpButton);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popup } from 'react-mapbox-gl';\nimport PopUpButton from './button';\nimport {isMobile} from 'react-device-detect';\n\nclass TreePopUp extends Component {\n    render() {\n        var hoveredTree = this.props.hoveredTree;\n        const onCloseButtonClick = this.props.onCloseButtonClick;\n        const onInfoButtonClick = this.props.onInfoButtonClick;\n        const isClicked = this.props.isClicked;\n        return (\n            <Popup\n                key={hoveredTree.recordid}\n                coordinates={hoveredTree.geometry.coordinates}\n                offset={15}\n                // style={{maxWidth: 200, minWidth: 200}}\n            >\n                <div style={{ overflowX: 'auto' }}>\n                    <h3 style={{fontFamily: 'Roboto', fontSize: 14, marginTop: 5, marginBottom:5}}>{hoveredTree.fields.libellefrancais}</h3>\n                    <table style={{ width: '100%' }}>\n                        <tbody>\n                            <tr>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, fontWeight: 'medium'}}>Genre</td>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, textAlign: 'right' }}>{hoveredTree.fields.genre}</td>\n                            </tr>\n                            <tr>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, fontWeight: 'medium'}}>Espèce</td>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, textAlign: 'right' }}>{hoveredTree.fields.espece}</td>\n                            </tr>\n                            <tr>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, fontWeight: 'medium'}}>Planté en</td>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, textAlign: 'right' }}>{hoveredTree.fields.dateplantation.substr(0, 4)}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    {(isClicked || isMobile) ? \n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            <PopUpButton \n                                onClick={onInfoButtonClick}\n                                text=\"Infos\">\n                            </PopUpButton>\n                            <PopUpButton\n                                onClick={onCloseButtonClick}\n                                text=\"Fermer\">\n                            </PopUpButton>\n                        </div>\n                    : null}\n                </div>\n            </Popup>\n        );\n    }\n}\n\nTreePopUp.propTypes = {\n    onInfoButtonClick: PropTypes.func.isRequired\n};\n\nexport default TreePopUp;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport { isMobile } from 'react-device-detect';\n\nconst styles = {\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n    treeImg: {\n        marginTop: 10,\n        marginBottom: 10,\n        marginRight: 10,\n        width: 100,\n        display: 'inlineBlock',\n        float: 'left'\n    },\n    wikiRow: {\n        marginLeft: 10,\n        marginRight: 10,\n    },\n    wikiTextContainer: {\n        marginLeft: 10,\n        marginRight: 10,\n    }\n};\n\nclass TemporaryDrawer extends React.Component {\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Drawer\n                    anchor={isMobile ? \"bottom\" : \"left\"}\n                    open={this.props.openDrawer}\n                    onClose={this.props.toggleDrawer}\n                >\n                    <div \n                        style={{width: isMobile ? 'auto' : 350}}\n                        tabIndex={0}\n                        role=\"button\"\n                        onClick={this.props.toggleDrawer}\n                        onKeyDown={this.props.toggleDrawer}\n                    >\n                        <div className={classes.wikiRow}>\n                            <img className={classes.treeImg} src={this.props.thumbnailUrl} alt=\"Wiki Thumbnail\" />\n                        </div>\n                        <div className={classes.wikiTextContainer}>\n                            <p>{this.props.wikiDesc}</p>\n                        </div>\n                    </div>\n                </Drawer>\n            </div>\n        );\n    }\n}\n\nTemporaryDrawer.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TemporaryDrawer);","import React, { Component } from 'react';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport { GeolocateControl } from 'mapbox-gl';\nimport TreeLayer from './treeLayer';\nimport TreePopUp from './treePopUp';\nimport TemporaryDrawer from './drawer';\nimport { token, style } from '../config.json';\nimport { isMobile } from 'react-device-detect';\n\nconst Map = ReactMapboxGl({\n    minZoom: 11,\n    maxZoom: 16,\n    accessToken: token\n});\nconst mapStyle = style;\nconst flyToOptions = {\n    speed: 0.6\n};\n\nclass TreeMap extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            treeDict: '',\n            nbTrees: 0,\n            treeIds: [],\n            hoveredTreeID: '',\n            clickedTreeID: '',\n            mapCenter: [2.3466110229492188, 48.85613168160397],\n            zoom: [12],\n            openDrawer: false,\n            wikiTreeData: '',\n            thumbnailUrl : '',\n            wikiDesc : ''\n        };\n        this.toggleDrawer = this.toggleDrawer.bind(this);\n        this.onInfoButtonClick = this.onInfoButtonClick.bind(this);\n    }\n\n    onMapLoad = (map) => {\n        map.addControl(\n            new GeolocateControl({\n                positionOptions: {enableHighAccuracy: true},\n                trackUserLocation: false})\n                );\n      };\n\n    onTreeHover = (hoveredTreeID, { map }) => {\n        map.getCanvas().style.cursor = 'pointer';\n        this.setState({\n            hoveredTreeID: (this.state.clickedTreeID || this.state.clickedTreeID === 0) ? '' : hoveredTreeID});\n        if (isMobile) {\n            this.setState({clickedTreeID: hoveredTreeID});\n        }\n    }\n\n    onTreeEndHover = ({ map }) => {\n        map.getCanvas().style.cursor = '';\n        this.setState({hoveredTreeID: ''});\n    }\n\n    onTreeClick = (hoveredTreeID) => {\n        this.setState({\n            hoveredTreeID: hoveredTreeID,\n            clickedTreeID: hoveredTreeID\n        });\n    };\n\n    onInfoButtonClick = () => {\n        console.log('CLICKED');\n        this.setState({\n            openDrawer: true\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n        var treeId = this.state.hoveredTreeID ? this.state.hoveredTreeID : this.state.clickedTreeID\n        var genre = this.state.treeDict[treeId].fields.genre;\n        var espece = this.state.treeDict[treeId].fields.espece;\n        var keyword = genre + '_' + espece\n        this.wikiTreeData(keyword);\n    }\n\n    onCloseButtonClick = () => {\n        this.setState({\n            hoveredTreeID: '',\n            clickedTreeID: ''\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n    }\n\n    toggleDrawer = () => {\n        this.setState({\n            openDrawer: false,\n            thumbnailUrl: '',\n            wikiDesc: ''\n        });\n    };\n\n    componentDidMount(){\n        this.TreeData();\n    }\n\n    TreeData = async () => {\n        var ids = [];\n        const response = await fetch(\n            'https://opendata.paris.fr/api/records/1.0/search/?dataset=arbresremarquablesparis&rows=200');\n        const responseJson = await response.json();\n        var maxNbTrees = Math.min(responseJson.parameters.rows, responseJson.nhits);\n        for (var i = 0; i < maxNbTrees; i++) {\n            ids.push(i)\n        }\n        return this.setState({\n            treeDict: responseJson.records,\n            nbTrees: maxNbTrees,\n            treeIds: ids\n        }, function(){\n            console.log('dict', this.state.treeDict);\n            console.log('nb', this.state.nbTrees);\n            console.log('ids', this.state.treeIds);\n        });\n    }\n\n    wikiTreeData = async (keyword) => {\n        var safeKeyword = keyword.split(' ').join('_')\n        console.log('Safe Keyword: ', safeKeyword)\n        var urlBase = 'https://fr.wikipedia.org/w/api.php?format=json&origin=*'\n        // First search for a page, get best result, get the title of the best result\n        var bestResultTitle = ''\n        var bestResultId = 0\n        try {\n            const searchResponse = await fetch(\n                `${urlBase}&action=query&list=search&srsearch=${safeKeyword}`);\n                // `${urlBase}&action=opensearch&search=${safeGenre}+incategory:Arbre&redirects=resolve`);\n            const responseJson = await searchResponse.json();\n            console.log('Search response Json', responseJson);\n            bestResultTitle = await responseJson.query.search[0].title;\n            bestResultId = await responseJson.query.search[0].pageid;\n            console.log('Best result', bestResultTitle);\n        } catch (error) {\n            console.log('search error', error)\n        }\n\n        var desc = ''\n        try {\n            const descQueryResponse = await fetch(\n                `${urlBase}&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=${bestResultTitle}`);\n            const descQueryJson = await descQueryResponse.json();\n            console.log('descQuery Json', descQueryJson)\n            const descPages = await descQueryJson.query.pages;\n            console.log('Pages', descPages)\n            desc = await descPages[Object.keys(descPages)[0]].extract;\n            console.log('desc', desc)\n        } catch (error) {\n            console.log('desc error', error)\n        }\n\n        // Then query the best result's page :)\n        var thumbnail = ''\n        try {\n            const thumbQueryResponse = await fetch(\n                `${urlBase}&action=query&prop=pageimages&titles=${bestResultTitle}&pithumbsize=200`);\n            const thumbQueryJson = await thumbQueryResponse.json();\n            console.log('thumbQuery Json', thumbQueryJson)\n            thumbnail = await thumbQueryJson.query.pages[bestResultId].thumbnail.source;\n            console.log('Thumbnail', thumbnail)\n        } catch (error) {\n            console.log('thumbnail error', error)\n        }\n\n        return this.setState({\n            wikiDesc: desc,\n            thumbnailUrl: thumbnail\n        }, function(){\n            console.log('wikiData', this.state.thumbnailUrl);\n        });\n    }\n\n    render() {\n        const hoveredTreeID = this.state.hoveredTreeID;\n        const clickedTreeID = this.state.clickedTreeID;\n        const mapCenter = this.state.mapCenter;\n        const zoom = this.state.zoom;\n        console.log('hoveredTreeID', hoveredTreeID);\n        console.log('clickedTreeID', clickedTreeID);\n        return (\n            <div>\n                <Map\n                    onStyleLoad={this.onMapLoad}\n                    style={mapStyle}\n                    center={mapCenter}\n                    containerStyle={{ width: '100vw', height: '100vh'}}\n                    flyToOptions={flyToOptions}\n                    zoom={zoom}\n                >\n                    <TreeLayer\n                        onTreeHover={this.onTreeHover}\n                        onTreeEndHover={this.onTreeEndHover}\n                        treeIds={this.state.treeIds}\n                        treeDict={this.state.treeDict}\n                        onTreeClick={this.onTreeClick}\n                    />\n                    {((hoveredTreeID || clickedTreeID) || (hoveredTreeID === 0) || (clickedTreeID === 0)) && (\n                        <TreePopUp\n                            isClicked={(clickedTreeID || clickedTreeID === 0) ? 1 : 0}\n                            hoveredTree={this.state.treeDict[\n                                (hoveredTreeID || hoveredTreeID === 0) ? hoveredTreeID : clickedTreeID]}\n                            onCloseButtonClick={this.onCloseButtonClick}\n                            onInfoButtonClick={this.onInfoButtonClick}\n                        />\n                        )}\n                </Map>\n                <TemporaryDrawer\n                    wikiDesc={this.state.wikiDesc}\n                    thumbnailUrl={this.state.thumbnailUrl}\n                    leftDrawer={this.state.leftDrawer}\n                    openDrawer={this.state.openDrawer}\n                    toggleDrawer={this.toggleDrawer}\n                />\n            </div>\n        );\n    }\n}\n\nexport default TreeMap;\n","import React, { Component } from 'react';\nimport TreeMap from './components/map'\nimport TemporaryDrawer from './components/drawer'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TemporaryDrawer />\n        <TreeMap />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}