{"version":3,"sources":["components/linkbutton.jsx","components/homepage.jsx","components/treeLayer.jsx","components/button.jsx","components/treePopUp.jsx","components/drawer.jsx","components/map.jsx","components/explore.jsx","components/learn.jsx","notfound.js","serviceWorker.js","index.js"],"names":["withStyles","theme","button","margin","props","classes","react_default","a","createElement","Button_default","size","variant","className","component","link","href","text","ExploreLink","Link","Object","assign","to","LearnLink","HomePage","src","alt","height","linkbutton","Component","TreeLayer","_this","this","treeIds","treeDict","lib_esm","type","id","layout","icon-image","map","onMouseEnter","onTreeHover","bind","onMouseLeave","onTreeEndHover","coordinates","geometry","onClick","onTreeClick","key","TreePopUp","hoveredTree","onCloseButtonClick","onInfoButtonClick","isClicked","long","lat","cityMapperLink","concat","recordid","offset","style","overflowX","fontFamily","fontSize","marginTop","marginBottom","fields","libellefrancais","width","fontWeight","textAlign","genre","espece","dateplantation","substr","isMobile","marginLeft","marginRight","target","rel","display","flexDirection","justifyContent","components_button","TemporaryDrawer","Drawer_default","anchor","open","openDrawer","onClose","toggleDrawer","tabIndex","role","onKeyDown","wikiRow","treeImg","thumbnailUrl","wikiTextContainer","wikiDesc","React","list","fullList","float","HomeLink","Map","ReactMapboxGl","minZoom","maxZoom","accessToken","token","mapStyle","flyToOptions","speed","TreeMap","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onMapLoad","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","hoveredTreeID","_ref","getCanvas","cursor","setState","state","clickedTreeID","_ref2","console","log","treeId","keyword","wikiTreeData","TreeData","asyncToGenerator","regenerator_default","mark","_callee","ids","response","responseJson","maxNbTrees","i","wrap","_context","prev","next","fetch","sent","json","Math","min","parameters","rows","nhits","push","abrupt","records","nbTrees","stop","_ref4","_callee2","safeKeyword","urlBase","bestResultTitle","bestResultId","searchResponse","desc","descQueryResponse","descQueryJson","descPages","thumbnail","thumbQueryResponse","thumbQueryJson","_context2","split","join","query","search","title","pageid","t0","pages","keys","extract","t1","source","t2","_x","apply","arguments","mapCenter","zoom","assertThisInitialized","onStyleLoad","center","containerStyle","treeLayer","treePopUp","drawer","leftDrawer","Explore","components_map","NotFound","Boolean","window","location","hostname","match","routing","HashRouter","Switch","Route","exact","path","Learn","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8de59455.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst styles = theme => ({\n    button: {\n        margin: 5\n    }\n});\n\nfunction LinkButton(props) {\n    const { classes } = props;\n    return (\n        <div>\n            <Button\n                size=\"small\"\n                variant={props.variant}\n                className={classes.button}\n                component={props.link}\n                href={props.href}\n            >\n                {props.text}\n            </Button>\n        </div>\n    );\n}\n\nLinkButton.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(LinkButton);","import React, { Component } from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom'\nimport LinkButton from './linkbutton';\n\nconst ExploreLink = props => <Link to=\"/explore\" {...props} />\nconst LearnLink = props => <Link to=\"/learn\" {...props} />\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <div>\n        <header>\n          <img src=\"/logo500try1.png\" alt=\"logo\" height=\"200\"/>\n          <h1>arboricool</h1>\n          <p>Votre guide arboricole</p>\n        </header>\n        <main>\n            <LinkButton text=\"Explorez\" variant=\"outlined\" link={ExploreLink}/>\n            <LinkButton text=\"Apprenez\" variant=\"outlined\" link={LearnLink}/>\n        </main>\n        <footer>\n          <LinkButton\n            className=\"inner\"\n            text=\"Code\"\n            link={\"a\"}\n            href={\"https://github.com/hippolytej/tree-map\"}\n          />\n          <LinkButton\n            text=\"Coolitude\"\n            link={\"a\"}\n            href={\"https://www.arbres.org/actualite.html\"}\n          />\n          <LinkButton\n            text=\"Data\"\n            link={\"a\"}\n            href={\"https://opendata.paris.fr/explore/dataset/les-arbres/information/\"}\n          />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\nimport { Layer, Feature } from 'react-mapbox-gl';\n\nclass TreeLayer extends Component {\n    render() {\n        const treeIds = this.props.treeIds;\n        const treeDict = this.props.treeDict;\n        return (\n            <Layer\n                type=\"symbol\"\n                id={'trees'}\n                layout={{'icon-image': 'billy'}}>\n                {\n                    treeIds.map(id => (\n                        <Feature\n                            onMouseEnter={this.props.onTreeHover.bind(this, id)}\n                            onMouseLeave={this.props.onTreeEndHover.bind(this)}\n                            coordinates={treeDict[id].geometry.coordinates}\n                            onClick={this.props.onTreeClick.bind(null, id)}\n                            key={id}\n                        />\n                    ))\n                }\n            </Layer>\n        );\n    }\n}\n\nexport default TreeLayer;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst styles = theme => ({\n    button: {\n        margin: 5\n    }\n});\n\nfunction PopUpButton(props) {\n    const { classes } = props;\n    return (\n        <div>\n            <Button\n                size=\"small\"\n                variant=\"outlined\"\n                className={classes.button}\n                onClick={props.onClick}>\n                {props.text}\n            </Button>\n        </div>\n    );\n}\n\nPopUpButton.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(PopUpButton);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popup } from 'react-mapbox-gl';\nimport PopUpButton from './button';\nimport {isMobile} from 'react-device-detect';\n\nclass TreePopUp extends Component {\n    render() {\n        var hoveredTree = this.props.hoveredTree;\n        const onCloseButtonClick = this.props.onCloseButtonClick;\n        const onInfoButtonClick = this.props.onInfoButtonClick;\n        const isClicked = this.props.isClicked;\n        const long = hoveredTree.geometry.coordinates[0]\n        const lat = hoveredTree.geometry.coordinates[1];\n        const cityMapperLink = `https://citymapper.com/directions?endcoord=${lat}%2C${long}&endname=Arbre%20Remarquable`;\n        return (\n            <Popup\n                key={hoveredTree.recordid}\n                coordinates={hoveredTree.geometry.coordinates}\n                offset={15}\n                // style={{maxWidth: 200, minWidth: 200}}\n            >\n                <div style={{ overflowX: 'auto' }}>\n                    <h3 style={{fontFamily: 'Roboto', fontSize: 14, marginTop: 5, marginBottom:5}}>{hoveredTree.fields.libellefrancais}</h3>\n                    <table style={{ width: '100%' }}>\n                        <tbody>\n                            <tr>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, fontWeight: 'medium'}}>Genre</td>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, textAlign: 'right' }}>{hoveredTree.fields.genre}</td>\n                            </tr>\n                            <tr>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, fontWeight: 'medium'}}>Espèce</td>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, textAlign: 'right' }}>{hoveredTree.fields.espece}</td>\n                            </tr>\n                            <tr>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, fontWeight: 'medium'}}>Planté en</td>\n                                <td style={{fontFamily: 'Roboto', fontSize: 14, textAlign: 'right' }}>{hoveredTree.fields.dateplantation.substr(0, 4)}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    {(isClicked || isMobile) ?\n                        <div style={{ marginLeft: 'auto', marginRight: 'auto'}}>\n                            <a\n                                href={cityMapperLink} \n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                <img\n                                    src=\"https://static.citymapper.com/img/embed/GetMeThere_Citymapper.png\"\n                                    alt=\"Get directions with Citymapper\"\n                                />\n                            </a>\n                            <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\n                                <PopUpButton\n                                    onClick={onInfoButtonClick}\n                                    text=\"Infos\">\n                                </PopUpButton>\n                                <PopUpButton\n                                    onClick={onCloseButtonClick}\n                                    text=\"Fermer\">\n                                </PopUpButton>\n                            </div>\n                        </div>\n                    : null}\n                </div>\n            </Popup>\n        );\n    }\n}\n\nTreePopUp.propTypes = {\n    onInfoButtonClick: PropTypes.func.isRequired\n};\n\nexport default TreePopUp;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport { isMobile } from 'react-device-detect';\n\nconst styles = {\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n    treeImg: {\n        marginTop: 10,\n        marginBottom: 10,\n        marginRight: 10,\n        width: 100,\n        display: 'inlineBlock',\n        float: 'left'\n    },\n    wikiRow: {\n        marginLeft: 10,\n        marginRight: 10,\n    },\n    wikiTextContainer: {\n        marginLeft: 10,\n        marginRight: 10,\n    }\n};\n\nclass TemporaryDrawer extends React.Component {\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Drawer\n                    anchor={isMobile ? \"bottom\" : \"left\"}\n                    open={this.props.openDrawer}\n                    onClose={this.props.toggleDrawer}\n                >\n                    <div \n                        style={{width: isMobile ? 'auto' : 350}}\n                        tabIndex={0}\n                        role=\"button\"\n                        onClick={this.props.toggleDrawer}\n                        onKeyDown={this.props.toggleDrawer}\n                    >\n                        <div className={classes.wikiRow}>\n                            <img className={classes.treeImg} src={this.props.thumbnailUrl} alt=\"Wiki Thumbnail\" />\n                        </div>\n                        <div className={classes.wikiTextContainer}>\n                            <p>{this.props.wikiDesc}</p>\n                        </div>\n                    </div>\n                </Drawer>\n            </div>\n        );\n    }\n}\n\nTemporaryDrawer.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TemporaryDrawer);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport { GeolocateControl } from 'mapbox-gl';\nimport TreeLayer from './treeLayer';\nimport TreePopUp from './treePopUp';\nimport LinkButton from './linkbutton';\nimport TemporaryDrawer from './drawer';\nimport { token, style } from '../config.json';\nimport { isMobile } from 'react-device-detect';\n\nconst HomeLink = props => <Link to=\"/\" {...props} />\n\nconst Map = ReactMapboxGl({\n    minZoom: 11,\n    maxZoom: 16,\n    accessToken: token\n});\nconst mapStyle = style;\nconst flyToOptions = {\n    speed: 0.6\n};\n\nclass TreeMap extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            treeDict: '',\n            nbTrees: 0,\n            treeIds: [],\n            hoveredTreeID: '',\n            clickedTreeID: '',\n            mapCenter: [2.3466110229492188, 48.85613168160397],\n            zoom: [12],\n            openDrawer: false,\n            wikiTreeData: '',\n            thumbnailUrl : '',\n            wikiDesc : ''\n        };\n        this.toggleDrawer = this.toggleDrawer.bind(this);\n        this.onInfoButtonClick = this.onInfoButtonClick.bind(this);\n    }\n\n    onMapLoad = (map) => {\n        map.addControl(\n            new GeolocateControl({\n                positionOptions: {enableHighAccuracy: true},\n                trackUserLocation: false})\n                );\n      };\n\n    onTreeHover = (hoveredTreeID, { map }) => {\n        map.getCanvas().style.cursor = 'pointer';\n        this.setState({\n            hoveredTreeID: (this.state.clickedTreeID || this.state.clickedTreeID === 0) ? '' : hoveredTreeID});\n        if (isMobile) {\n            this.setState({clickedTreeID: hoveredTreeID});\n        }\n    }\n\n    onTreeEndHover = ({ map }) => {\n        map.getCanvas().style.cursor = '';\n        this.setState({hoveredTreeID: ''});\n    }\n\n    onTreeClick = (hoveredTreeID) => {\n        this.setState({\n            hoveredTreeID: hoveredTreeID,\n            clickedTreeID: hoveredTreeID\n        });\n    };\n\n    onInfoButtonClick = () => {\n        console.log('CLICKED');\n        this.setState({\n            openDrawer: true\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n        var treeId = this.state.hoveredTreeID ? this.state.hoveredTreeID : this.state.clickedTreeID\n        var genre = this.state.treeDict[treeId].fields.genre;\n        var espece = this.state.treeDict[treeId].fields.espece;\n        var keyword = genre + '_' + espece\n        this.wikiTreeData(keyword);\n    }\n\n    onCloseButtonClick = () => {\n        this.setState({\n            hoveredTreeID: '',\n            clickedTreeID: ''\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n    }\n\n    toggleDrawer = () => {\n        this.setState({\n            openDrawer: false,\n            thumbnailUrl: '',\n            wikiDesc: ''\n        });\n    };\n\n    componentDidMount(){\n        this.TreeData();\n    }\n\n    TreeData = async () => {\n        var ids = [];\n        const response = await fetch(\n            'https://opendata.paris.fr/api/records/1.0/search/?dataset=arbresremarquablesparis&rows=200');\n        const responseJson = await response.json();\n        var maxNbTrees = Math.min(responseJson.parameters.rows, responseJson.nhits);\n        for (var i = 0; i < maxNbTrees; i++) {\n            ids.push(i)\n        }\n        return this.setState({\n            treeDict: responseJson.records,\n            nbTrees: maxNbTrees,\n            treeIds: ids\n        }, function(){\n            console.log('dict', this.state.treeDict);\n            console.log('nb', this.state.nbTrees);\n            console.log('ids', this.state.treeIds);\n        });\n    }\n\n    wikiTreeData = async (keyword) => {\n        var safeKeyword = keyword.split(' ').join('_')\n        console.log('Safe Keyword: ', safeKeyword)\n        var urlBase = 'https://fr.wikipedia.org/w/api.php?format=json&origin=*'\n        // First search for a page, get best result, get the title of the best result\n        var bestResultTitle = ''\n        var bestResultId = 0\n        try {\n            const searchResponse = await fetch(\n                `${urlBase}&action=query&list=search&srsearch=${safeKeyword}`);\n                // `${urlBase}&action=opensearch&search=${safeGenre}+incategory:Arbre&redirects=resolve`);\n            const responseJson = await searchResponse.json();\n            console.log('Search response Json', responseJson);\n            bestResultTitle = await responseJson.query.search[0].title;\n            bestResultId = await responseJson.query.search[0].pageid;\n            console.log('Best result', bestResultTitle);\n        } catch (error) {\n            console.log('search error', error)\n        }\n\n        var desc = ''\n        try {\n            const descQueryResponse = await fetch(\n                `${urlBase}&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=${bestResultTitle}`);\n            const descQueryJson = await descQueryResponse.json();\n            console.log('descQuery Json', descQueryJson)\n            const descPages = await descQueryJson.query.pages;\n            console.log('Pages', descPages)\n            desc = await descPages[Object.keys(descPages)[0]].extract;\n            console.log('desc', desc)\n        } catch (error) {\n            console.log('desc error', error)\n        }\n\n        // Then query the best result's page :)\n        var thumbnail = ''\n        try {\n            const thumbQueryResponse = await fetch(\n                `${urlBase}&action=query&prop=pageimages&titles=${bestResultTitle}&pithumbsize=200`);\n            const thumbQueryJson = await thumbQueryResponse.json();\n            console.log('thumbQuery Json', thumbQueryJson)\n            thumbnail = await thumbQueryJson.query.pages[bestResultId].thumbnail.source;\n            console.log('Thumbnail', thumbnail)\n        } catch (error) {\n            console.log('thumbnail error', error)\n        }\n\n        return this.setState({\n            wikiDesc: desc,\n            thumbnailUrl: thumbnail\n        }, function(){\n            console.log('wikiData', this.state.thumbnailUrl);\n        });\n    }\n\n    render() {\n        const hoveredTreeID = this.state.hoveredTreeID;\n        const clickedTreeID = this.state.clickedTreeID;\n        const mapCenter = this.state.mapCenter;\n        const zoom = this.state.zoom;\n        console.log('hoveredTreeID', hoveredTreeID);\n        console.log('clickedTreeID', clickedTreeID);\n        return (\n            <div>\n                <Map\n                    onStyleLoad={this.onMapLoad}\n                    style={mapStyle}\n                    center={mapCenter}\n                    containerStyle={{ width: '100vw', height: '100vh'}}\n                    flyToOptions={flyToOptions}\n                    zoom={zoom}\n                >\n                    <LinkButton text=\"Accueil\" variant=\"outlined\" link={HomeLink}>Home</LinkButton>\n                    <TreeLayer\n                        onTreeHover={this.onTreeHover}\n                        onTreeEndHover={this.onTreeEndHover}\n                        treeIds={this.state.treeIds}\n                        treeDict={this.state.treeDict}\n                        onTreeClick={this.onTreeClick}\n                    />\n                    {((hoveredTreeID || clickedTreeID) || (hoveredTreeID === 0) || (clickedTreeID === 0)) && (\n                        <TreePopUp\n                            isClicked={(clickedTreeID || clickedTreeID === 0) ? 1 : 0}\n                            hoveredTree={this.state.treeDict[\n                                (hoveredTreeID || hoveredTreeID === 0) ? hoveredTreeID : clickedTreeID]}\n                            onCloseButtonClick={this.onCloseButtonClick}\n                            onInfoButtonClick={this.onInfoButtonClick}\n                        />\n                        )}\n                </Map>\n                <TemporaryDrawer\n                    wikiDesc={this.state.wikiDesc}\n                    thumbnailUrl={this.state.thumbnailUrl}\n                    leftDrawer={this.state.leftDrawer}\n                    openDrawer={this.state.openDrawer}\n                    toggleDrawer={this.toggleDrawer}\n                />\n            </div>\n        );\n    }\n}\n\nexport default TreeMap;\n","import React, { Component } from 'react';\nimport TreeMap from './map'\nimport TemporaryDrawer from './drawer'\n\nclass Explore extends Component {\n  render() {\n    return (\n      <div>\n        <TemporaryDrawer />\n        <TreeMap />\n      </div>\n    );\n  }\n}\n\nexport default Explore;","import React, { Component } from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\nimport LinkButton from './linkbutton';\n\nconst HomeLink = props => <Link to=\"/\" {...props} />\n\nclass Explore extends Component {\n  render() {\n    return (\n      <div>\n        <main>\n          Coming soon\n        </main>\n        <footer>\n          <LinkButton text=\"Accueil\" variant=\"outlined\" link={HomeLink}>Home</LinkButton>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default Explore;","import React, { Component } from 'react';\nimport './App.css';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>404</h1>\n        </div>\n        <p>Wow c'est la hess ici ou quoi ?</p>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Route, HashRouter, Switch} from 'react-router-dom'\nimport './index.css'\nimport HomePage from './components/homepage';\nimport Explore from './components/explore';\nimport Learn from './components/learn';\nimport NotFound from './notfound';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n    <HashRouter>\n        <div>\n            <Switch>\n                <Route exact path=\"/\" component={HomePage} />\n                <Route path=\"/explore\" component={Explore} />\n                <Route path=\"/learn\" component={Learn} />\n                <Route component={NotFound} />\n            </Switch>\n        </div>\n    </HashRouter>\n)\n\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}