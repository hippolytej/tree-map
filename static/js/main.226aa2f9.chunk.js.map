{"version":3,"sources":["components/linkbuttons.jsx","components/addressForm.jsx","components/homepage.jsx","components/treeLayer.jsx","components/button.jsx","components/treePopUp.jsx","components/progress.jsx","components/image.jsx","components/drawer.jsx","utils/parisData.jsx","utils/wikiData.jsx","utils/map_utils.jsx","components/remarkableTreesMap.jsx","components/explore.jsx","utils/geocode.jsx","components/nearbyTreesMap.jsx","components/aroundMe.jsx","notfound.js","serviceWorker.js","index.js"],"names":["styles","theme","button","margin","justifyContent","RegularLink","withStyles","props","classes","react_default","a","createElement","Button_default","size","color","variant","className","component","to","Link","undefined","href","text","FloatingLink","Fab_default","aria-label","AddressForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","onEnterDown","event","target","value","onChange","e","keyCode","root","noValidate","autoComplete","Input_default","placeholder","input","inputProps","style","textAlign","onKeyDown","fullWidth","React","Component","paddingTop","alignItems","width","HomePage","state","address","handleAddressChange","setState","history","push","pathname","src","alt","height","addressForm","TreeLayer","treeIds","treeArray","markerType","lib_esm","type","id","treeType","layout","icon-image","paint","circle-radius","circle-color","map","onMouseEnter","onTreeHover","onMouseLeave","onTreeEndHover","coordinates","geometry","onClick","onTreeClick","key","TreePopUp","hoveredTree","onCloseButtonClick","onInfoButtonClick","isClicked","long","lat","cityMapperLink","concat","recordid","offset","overflowX","fontFamily","fontSize","marginTop","marginBottom","fields","libellefrancais","fontWeight","genre","espece","dateplantation","substr","isMobile","marginLeft","marginRight","getMeThere","rel","display","flexDirection","components_button","progress","CircularProgress_default","ImageWithStatusText","componentDidMount","timerHandle","setTimeout","imageLoaded","componentWillUnmount","clearTimeout","console","log","imageUrl","onLoad","handleImageLoaded","onError","handleImageErrored","mobileContent","maxHeight","treeImg","float","wikiRow","wikiTextContainer","bottom","overflow","TemporaryDrawer","treeName","Drawer_default","anchor","open","openDrawer","onClose","toggleDrawer","tabIndex","role","components_image","thumbnailUrl","altText","wikiDesc","mobileDrawer","desktopDrawer","_callee","ids","response","responseJson","maxNbTrees","i","regenerator_default","wrap","_context","prev","next","fetch","sent","json","Math","min","parameters","rows","nhits","abrupt","records","nbTrees","stop","parisData","_x","_x2","_x3","_parisData","apply","arguments","_callee2","latitude","longitude","radius","treeNamesDict","libelle","_context2","random","toString","keyword","safeKeyword","urlBase","bestResultTitle","bestResultId","searchResponse","desc","descQueryResponse","descQueryJson","descPages","thumbnail","thumbQueryResponse","thumbQueryJson","split","join","query","search","title","pageid","t0","pages","keys","extract","t1","source","t2","hoveredTreeID","_ref","getCanvas","cursor","clickedTreeID","_ref2","treeId","_wikiData","onMapLoad","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","Map","ReactMapboxGl","minZoom","maxZoom","accessToken","token","mapStyle","flyToOptions","speed","RemarkableTreesMap","clickedTreeName","mapCenter","zoom","wikiTreeData","mapUtils","treeData","_remarkableParisData","onStyleLoad","center","containerStyle","treeLayer","treePopUp","drawer","leftDrawer","Explore","remarkableTreesMap","features","locationAvailable","NearbyTreesMap","locationFound","position","coords","errorHandler","err","code","alert","_this2","_getCoordinates","then","navigator","geolocation","getCurrentPosition","timeout","getUserPosition","_this3","nearbyTreesMap_Map","top","right","listStyle","item","name","backgroundColor","borderRadius","paddingLeft","nearbyTreesMap","location","NotFound","Boolean","window","hostname","match","routing","HashRouter","Switch","Route","exact","path","AroundMe","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.226aa2f9.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { Link } from \"react-router-dom\";\n\nconst styles = (theme) => ({\n  button: {\n    margin: 3,\n    justifyContent: \"center\",\n  },\n});\n\nfunction LinkButton(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <Button\n        size=\"small\"\n        color=\"inherit\"\n        variant={props.variant}\n        className={classes.button}\n        component={props.to ? Link : undefined}\n        to={props.to}\n        href={props.href}\n      >\n        {props.text}\n      </Button>\n    </div>\n  );\n}\n\nfunction FloatingLinkButton(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <Fab\n        size=\"small\"\n        color=\"primary\"\n        variant=\"extended\"\n        aria-label=\"Add\"\n        className={classes.margin}\n        component={props.to ? Link : undefined}\n        to={props.to}\n        href={props.href}\n      >\n        {props.text}\n      </Fab>\n    </div>\n  );\n}\n\nLinkButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nFloatingLinkButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst RegularLink = withStyles(styles)(LinkButton);\nconst FloatingLink = withStyles(styles)(FloatingLinkButton);\n\nexport { RegularLink, FloatingLink };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Input from \"@material-ui/core/Input\";\n\nconst styles = (theme) => ({\n  input: {\n    paddingTop: 20,\n    margin: \"auto\",\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"230px\",\n  },\n});\n\nclass AddressForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.onEnterDown = this.onEnterDown.bind(this);\n  }\n\n  handleChange(event) {\n    const text = event.target.value;\n    this.props.onChange(text);\n  }\n\n  onEnterDown(e) {\n    if (e.keyCode === 13) {\n      this.props.onEnterDown();\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <Input\n          placeholder=\"Ou à cette adresse\"\n          className={classes.input}\n          inputProps={{ style: { textAlign: \"center\" } }}\n          value={this.props.value}\n          onChange={this.handleChange}\n          onKeyDown={this.onEnterDown}\n          fullWidth={true}\n        />\n      </form>\n    );\n  }\n}\n\nAddressForm.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AddressForm);\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport { RegularLink, FloatingLink } from \"./linkbuttons\";\nimport AddressForm from \"./addressForm\";\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n    };\n    this.handleAddressChange = this.handleAddressChange.bind(this);\n    this.onEnterDown = this.onEnterDown.bind(this);\n  }\n\n  handleAddressChange(value) {\n    this.setState({ address: value });\n  }\n\n  onEnterDown() {\n    this.props.history.push({ pathname: \"/around-me\", state: this.state });\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          <img src=\"/logo_canopee_v0.001.png\" alt=\"logo\" height={\"100%\"} />\n        </header>\n        <main>\n          <h3>Explorez le Paris des arbres remarquables</h3>\n          <FloatingLink text=\"Carte\" variant=\"outlined\" to=\"/explore\" />\n          <h3>Faites conaissance avec les arbres qui vous entourent</h3>\n          <FloatingLink\n            text=\"Autour de vous\"\n            variant=\"outlined\"\n            to={{ pathname: \"/around-me\", state: this.state }}\n          />\n          <AddressForm\n            onChange={this.handleAddressChange}\n            onEnterDown={this.onEnterDown}\n            value={this.state.address}\n          />\n        </main>\n        <footer>\n          <RegularLink\n            className=\"inner\"\n            text=\"Code\"\n            href={\"https://github.com/hippolytej/tree-map\"}\n          />\n          <RegularLink\n            text=\"Coolitude\"\n            href={\"https://www.arbres.org/actualite.html\"}\n          />\n          <RegularLink\n            text=\"Data\"\n            href={\n              \"https://opendata.paris.fr/explore/dataset/les-arbres/information/\"\n            }\n          />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\nimport { Layer, Feature } from \"react-mapbox-gl\";\n\nclass TreeLayer extends Component {\n  render() {\n    const treeIds = this.props.treeIds;\n    const treeArray = this.props.treeArray;\n    const color = this.props.color;\n    const markerType = this.props.markerType;\n    return (\n      <Layer\n        type={markerType}\n        id={this.props.treeType}\n        layout={markerType === \"symbol\" ? { \"icon-image\": \"billy\" } : undefined}\n        paint={\n          markerType === \"circle\"\n            ? { \"circle-radius\": 7, \"circle-color\": color }\n            : undefined\n        }\n      >\n        {treeIds.map((id) => (\n          <Feature\n            onMouseEnter={this.props.onTreeHover.bind(this, id)}\n            onMouseLeave={this.props.onTreeEndHover.bind(this)}\n            coordinates={treeArray[id].geometry.coordinates}\n            onClick={this.props.onTreeClick.bind(null, id)}\n            key={id}\n          />\n        ))}\n      </Layer>\n    );\n  }\n}\n\nexport default TreeLayer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst styles = (theme) => ({\n  button: {\n    margin: 5,\n  },\n});\n\nfunction PopUpButton(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <Button\n        size=\"small\"\n        variant=\"outlined\"\n        className={classes.button}\n        onClick={props.onClick}\n      >\n        {props.text}\n      </Button>\n    </div>\n  );\n}\n\nPopUpButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PopUpButton);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Popup } from \"react-mapbox-gl\";\nimport PopUpButton from \"./button\";\nimport { isMobile } from \"react-device-detect\";\n\nclass TreePopUp extends Component {\n  render() {\n    var hoveredTree = this.props.hoveredTree;\n    const onCloseButtonClick = this.props.onCloseButtonClick;\n    const onInfoButtonClick = this.props.onInfoButtonClick;\n    const isClicked = this.props.isClicked;\n    const long = hoveredTree.geometry.coordinates[0];\n    const lat = hoveredTree.geometry.coordinates[1];\n    const cityMapperLink = `https://citymapper.com/directions?endcoord=${lat}%2C${long}&endname=Arbre%20Remarquable`;\n    return (\n      <Popup\n        key={hoveredTree.recordid}\n        coordinates={hoveredTree.geometry.coordinates}\n        offset={15}\n        // style={{maxWidth: 200, minWidth: 200}}\n      >\n        <div style={{ overflowX: \"auto\" }}>\n          <h3\n            style={{\n              fontFamily: \"Roboto\",\n              fontSize: 14,\n              marginTop: 5,\n              marginBottom: 5,\n            }}\n          >\n            {hoveredTree.fields.libellefrancais}\n          </h3>\n          <table style={{ width: \"100%\" }}>\n            <tbody>\n              <tr>\n                <td\n                  style={{\n                    fontFamily: \"Roboto\",\n                    fontSize: 14,\n                    fontWeight: \"medium\",\n                  }}\n                >\n                  Genre\n                </td>\n                <td\n                  style={{\n                    fontFamily: \"Roboto\",\n                    fontSize: 14,\n                    textAlign: \"right\",\n                  }}\n                >\n                  {hoveredTree.fields.genre}\n                </td>\n              </tr>\n              <tr>\n                <td\n                  style={{\n                    fontFamily: \"Roboto\",\n                    fontSize: 14,\n                    fontWeight: \"medium\",\n                  }}\n                >\n                  Espèce\n                </td>\n                <td\n                  style={{\n                    fontFamily: \"Roboto\",\n                    fontSize: 14,\n                    textAlign: \"right\",\n                  }}\n                >\n                  {hoveredTree.fields.espece}\n                </td>\n              </tr>\n              {\"dateplantation\" in hoveredTree.fields ? (\n                <tr>\n                  <td\n                    style={{\n                      fontFamily: \"Roboto\",\n                      fontSize: 14,\n                      fontWeight: \"medium\",\n                    }}\n                  >\n                    Planté en\n                  </td>\n                  <td\n                    style={{\n                      fontFamily: \"Roboto\",\n                      fontSize: 14,\n                      textAlign: \"right\",\n                    }}\n                  >\n                    {hoveredTree.fields.dateplantation.substr(0, 4)}\n                  </td>\n                </tr>\n              ) : null}\n            </tbody>\n          </table>\n          {isClicked || isMobile ? (\n            <div style={{ marginLeft: \"auto\", marginRight: \"auto\" }}>\n              {this.props.getMeThere ? (\n                <a\n                  href={cityMapperLink}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <img\n                    src=\"https://static.citymapper.com/img/embed/GetMeThere_Citymapper.png\"\n                    alt=\"Get directions with Citymapper\"\n                  />\n                </a>\n              ) : null}\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <PopUpButton\n                  onClick={onInfoButtonClick}\n                  text=\"Infos\"\n                ></PopUpButton>\n                <PopUpButton\n                  onClick={onCloseButtonClick}\n                  text=\"Fermer\"\n                ></PopUpButton>\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </Popup>\n    );\n  }\n}\n\nTreePopUp.propTypes = {\n  onInfoButtonClick: PropTypes.func.isRequired,\n};\n\nexport default TreePopUp;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst styles = (theme) => ({\n  progress: {\n    marginLeft: 20,\n    marginTop: 20,\n    width: \"40\",\n  },\n});\n\nfunction CircularIndeterminate(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <CircularProgress className={classes.progress} color=\"primary\" />\n    </div>\n  );\n}\n\nCircularIndeterminate.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CircularIndeterminate);\n","import React from \"react\";\nimport CircularIndeterminate from \"./progress\";\n\nclass ImageWithStatusText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { imageLoaded: false };\n  }\n\n  handleImageLoaded() {\n    this.setState({ imageLoaded: true });\n    console.log(\"LOADED\", this.state);\n  }\n\n  handleImageErrored() {\n    this.setState({ imageLoaded: false });\n  }\n\n  componentDidMount = () => {\n    this.timerHandle = setTimeout(() => {\n      this.setState({ imageLoaded: true });\n      this.timerHandle = false;\n    }, 3000);\n  };\n\n  componentWillUnmount = () => {\n    if (this.timerHandle) {\n      clearTimeout(this.timerHandle);\n      this.timerHandle = false;\n    }\n  };\n\n  render() {\n    const imageLoaded = this.state.imageLoaded;\n    const imageUrl = this.props.imageUrl;\n    return (\n      <div>\n        <img\n          src={imageUrl}\n          onLoad={this.handleImageLoaded.bind(this)}\n          onError={this.handleImageErrored.bind(this)}\n          alt=\"\"\n          style={this.props.style}\n        />\n        {imageLoaded ? null : <CircularIndeterminate />}\n      </div>\n    );\n  }\n}\n\nexport default ImageWithStatusText;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\n// import SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport ImageWithStatusText from \"./image\";\nimport { isMobile } from \"react-device-detect\";\n\nconst styles = {\n  mobileContent: { maxHeight: \"80vh\" },\n  treeImg: {\n    height: \"20vh\",\n    display: \"inlineBlock\",\n    float: \"left\",\n  },\n  wikiRow: {\n    width: \"90%\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    marginTop: 15,\n  },\n  wikiTextContainer: {\n    width: \"90%\",\n    bottom: 10,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    textAlign: \"left\",\n    display: \"flex\",\n    alignItems: \"center\",\n    overflow: \"scroll\",\n  },\n};\n\nclass TemporaryDrawer extends React.Component {\n  desktopDrawer(classes, treeName) {\n    return (\n      <Drawer\n        anchor=\"left\"\n        open={this.props.openDrawer}\n        onClose={this.props.toggleDrawer}\n      >\n        <div\n          style={{ width: 350, alignItems: \"center\", justifyContent: \"center\" }}\n          tabIndex={0}\n          role=\"button\"\n          onClick={this.props.toggleDrawer}\n          onKeyDown={this.props.toggleDrawer}\n        >\n          <div className={classes.wikiRow}>\n            {treeName}\n            <ImageWithStatusText\n              imageUrl={this.props.thumbnailUrl}\n              altText={treeName}\n            />\n          </div>\n          <div className={classes.wikiTextContainer}>\n            <p style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n              {this.props.wikiDesc}\n            </p>\n          </div>\n        </div>\n      </Drawer>\n    );\n  }\n\n  mobileDrawer(classes, treeName) {\n    return (\n      <Drawer\n        anchor=\"bottom\"\n        open={this.props.openDrawer}\n        onClose={this.props.toggleDrawer}\n      >\n        <div\n          className={classes.mobileContent}\n          tabIndex={0}\n          role=\"button\"\n          onClick={this.props.toggleDrawer}\n          onKeyDown={this.props.toggleDrawer}\n        >\n          <div className={classes.wikiRow}>\n            {treeName}\n            <ImageWithStatusText\n              imageUrl={this.props.thumbnailUrl}\n              altText={treeName}\n              style={styles.treeImg}\n            />\n          </div>\n          <div className={classes.wikiTextContainer}>\n            <p>{this.props.wikiDesc}</p>\n          </div>\n        </div>\n      </Drawer>\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n    var treeName = this.props.treeName;\n    return (\n      <div>\n        {isMobile\n          ? this.mobileDrawer(classes, treeName)\n          : this.desktopDrawer(classes, treeName)}\n      </div>\n    );\n  }\n}\n\nTemporaryDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TemporaryDrawer);\n","export async function remarkableParisData() {\n  var ids = [];\n  const response = await fetch(\n    \"https://opendata.paris.fr/api/records/1.0/search/?dataset=arbresremarquablesparis&rows=200\"\n  );\n  const responseJson = await response.json();\n  var maxNbTrees = Math.min(responseJson.parameters.rows, responseJson.nhits);\n  for (var i = 0; i < maxNbTrees; i++) {\n    ids.push(i);\n  }\n  return this.setState(\n    {\n      treeArray: responseJson.records,\n      nbTrees: maxNbTrees,\n      treeIds: ids,\n    },\n    function () {\n      console.log(\"nb loaded trees\", this.state.nbTrees);\n    }\n  );\n}\n\nexport async function parisData(latitude, longitude, radius) {\n  console.log(\"api call lat\", latitude);\n  console.log(\"api call long\", longitude);\n  var ids = [];\n  var urlBase =\n    \"https://opendata.paris.fr/api/records/1.0/search/?dataset=les-arbres&q=&facet=typeemplacement&facet=domanialite&facet=arrondissement&facet=libellefrancais&facet=genre&facet=espece&facet=varieteoucultivar&facet=circonferenceencm&facet=hauteurenm&facet=stadedeveloppement&facet=remarquable&geofilter.distance=\";\n  const response = await fetch(\n    `${urlBase}${latitude}%2C${longitude}%2C${radius}&rows=200`\n  );\n  const responseJson = await response.json();\n  var maxNbTrees = Math.min(responseJson.parameters.rows, responseJson.nhits);\n  var treeNamesDict = {};\n  for (var i = 0; i < maxNbTrees; i++) {\n    ids.push(i);\n    var libelle = responseJson.records[i].fields.libellefrancais;\n    if (libelle in treeNamesDict) {\n      treeNamesDict[libelle][\"ids\"].push(i);\n    } else {\n      treeNamesDict[libelle] = {\n        ids: [i],\n        color: \"#\" + (((1 << 24) * Math.random()) | 0).toString(16),\n      };\n    }\n  }\n\n  return this.setState(\n    {\n      treeArray: responseJson.records,\n      treeNamesDict: treeNamesDict,\n      nbTrees: maxNbTrees,\n    },\n    function () {\n      console.log(\"nb loaded trees\", this.state.nbTrees);\n    }\n  );\n}\n","export async function wikiData(keyword) {\n  var safeKeyword = keyword.split(\" \").join(\"_\");\n  console.log(\"Safe Keyword: \", safeKeyword);\n  var urlBase = \"https://fr.wikipedia.org/w/api.php?format=json&origin=*\";\n  // First search for a page, get best result, get the title of the best result\n  var bestResultTitle = \"\";\n  var bestResultId = 0;\n  try {\n    const searchResponse = await fetch(\n      `${urlBase}&action=query&list=search&srsearch=${safeKeyword}`\n    );\n    // `${urlBase}&action=opensearch&search=${safeGenre}+incategory:Arbre&redirects=resolve`);\n    const responseJson = await searchResponse.json();\n    console.log(\"Search response Json\", responseJson);\n    bestResultTitle = await responseJson.query.search[0].title;\n    bestResultId = await responseJson.query.search[0].pageid;\n    console.log(\"Best result\", bestResultTitle);\n  } catch (error) {\n    console.log(\"search error\", error);\n  }\n\n  var desc = \"\";\n  try {\n    const descQueryResponse = await fetch(\n      `${urlBase}&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=${bestResultTitle}`\n    );\n    const descQueryJson = await descQueryResponse.json();\n    console.log(\"descQuery Json\", descQueryJson);\n    const descPages = await descQueryJson.query.pages;\n    console.log(\"Pages\", descPages);\n    desc = await descPages[Object.keys(descPages)[0]].extract;\n    // console.log(\"desc\", desc);\n  } catch (error) {\n    console.log(\"desc error\", error);\n  }\n\n  // Then query the best result's page :)\n  var thumbnail = \"\";\n  try {\n    const thumbQueryResponse = await fetch(\n      `${urlBase}&action=query&prop=pageimages&titles=${bestResultTitle}&pithumbsize=200`\n    );\n    const thumbQueryJson = await thumbQueryResponse.json();\n    console.log(\"thumbQuery Json\", thumbQueryJson);\n    thumbnail = await thumbQueryJson.query.pages[bestResultId].thumbnail.source;\n    console.log(\"Thumbnail\", thumbnail);\n  } catch (error) {\n    console.log(\"thumbnail error\", error);\n  }\n\n  return this.setState(\n    {\n      wikiDesc: desc,\n      thumbnailUrl: thumbnail,\n    },\n    function () {\n      console.log(\"wikiData\", this.state.thumbnailUrl);\n    }\n  );\n}\n","import React from \"react\";\nimport { isMobile } from \"react-device-detect\";\nimport { wikiData } from \"../utils/wikiData\";\nimport { GeolocateControl } from \"mapbox-gl\";\n\nexport function ColorDot(id, name, color) {\n  return (\n    <li key={id}>\n      <span\n        style={{\n          height: 16,\n          width: 16,\n          backgroundColor: color,\n          borderRadius: 50,\n          display: \"inline-block\",\n        }}\n      >\n        <span style={{ paddingLeft: 30 }}>{name}</span>\n      </span>\n    </li>\n  );\n}\n\nexport function onTreeHover(hoveredTreeID, { map }) {\n  map.getCanvas().style.cursor = \"pointer\";\n  this.setState({\n    hoveredTreeID:\n      this.state.clickedTreeID || this.state.clickedTreeID === 0\n        ? \"\"\n        : hoveredTreeID,\n  });\n  if (isMobile) {\n    this.setState({ clickedTreeID: hoveredTreeID });\n  }\n}\n\nexport function onTreeEndHover({ map }) {\n  map.getCanvas().style.cursor = \"\";\n  this.setState({ hoveredTreeID: \"\" });\n}\n\nexport function onTreeClick(hoveredTreeID) {\n  this.setState({\n    hoveredTreeID: hoveredTreeID,\n    clickedTreeID: hoveredTreeID,\n  });\n}\n\nexport function onInfoButtonClick() {\n  console.log(\"CLICKED\");\n  this.setState({\n    openDrawer: true,\n  });\n  var treeId = this.state.hoveredTreeID\n    ? this.state.hoveredTreeID\n    : this.state.clickedTreeID;\n  var genre = this.state.treeArray[treeId].fields.genre;\n  var espece = this.state.treeArray[treeId].fields.espece;\n  var keyword = genre + \"_\" + espece;\n  wikiData.apply(this, [keyword]);\n}\n\nexport function onCloseButtonClick() {\n  this.setState({\n    hoveredTreeID: \"\",\n    clickedTreeID: \"\",\n  });\n}\n\nexport function toggleDrawer() {\n  this.setState({\n    openDrawer: false,\n    thumbnailUrl: \"\",\n    wikiDesc: \"\",\n  });\n}\n\nexport function onMapLoad(map) {\n  map.addControl(\n    new GeolocateControl({\n      positionOptions: { enableHighAccuracy: true },\n      trackUserLocation: false,\n    })\n  );\n}\n","import React, { Component } from \"react\";\nimport { token, style } from \"../config.json\";\n// Components\nimport ReactMapboxGl from \"react-mapbox-gl\";\nimport TreeLayer from \"./treeLayer\";\nimport TreePopUp from \"./treePopUp\";\nimport { RegularLink } from \"./linkbuttons\";\nimport TemporaryDrawer from \"./drawer\";\n// Utils\nimport { remarkableParisData } from \"../utils/parisData\";\nimport * as mapUtils from \"../utils/map_utils\";\n\nconst Map = ReactMapboxGl({\n  minZoom: 11,\n  maxZoom: 16,\n  accessToken: token,\n});\nconst mapStyle = style;\nconst flyToOptions = {\n  speed: 0.6,\n};\n\nclass RemarkableTreesMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treeArray: \"\",\n      nbTrees: 0,\n      treeIds: [],\n      hoveredTreeID: \"\",\n      clickedTreeID: \"\",\n      clickedTreeName: \"\",\n      mapCenter: [2.3466110229492188, 48.85613168160397],\n      zoom: [12],\n      openDrawer: false,\n      wikiTreeData: \"\",\n      thumbnailUrl: \"\",\n      wikiDesc: \"\",\n    };\n    this.onTreeHover = mapUtils.onTreeHover.bind(this);\n    this.onTreeEndHover = mapUtils.onTreeEndHover.bind(this);\n    this.onTreeClick = mapUtils.onTreeClick.bind(this);\n    this.onInfoButtonClick = mapUtils.onInfoButtonClick.bind(this);\n    this.onCloseButtonClick = mapUtils.onCloseButtonClick.bind(this);\n    this.toggleDrawer = mapUtils.toggleDrawer.bind(this);\n    this.onMapLoad = mapUtils.onMapLoad.bind(this);\n    this.treeData = remarkableParisData.bind(this);\n  }\n\n  componentDidMount() {\n    this.treeData();\n  }\n\n  render() {\n    const hoveredTreeID = this.state.hoveredTreeID;\n    const clickedTreeID = this.state.clickedTreeID;\n    const mapCenter = this.state.mapCenter;\n    const zoom = this.state.zoom;\n    return (\n      <div>\n        <Map\n          onStyleLoad={this.onMapLoad}\n          style={mapStyle}\n          center={mapCenter}\n          containerStyle={{ width: \"100vw\", height: \"100vh\" }}\n          flyToOptions={flyToOptions}\n          zoom={zoom}\n        >\n          <RegularLink text=\"Accueil\" variant=\"outlined\" to=\"/\">\n            Home\n          </RegularLink>\n          <TreeLayer\n            onTreeHover={this.onTreeHover}\n            onTreeEndHover={this.onTreeEndHover}\n            treeIds={this.state.treeIds}\n            treeArray={this.state.treeArray}\n            onTreeClick={this.onTreeClick}\n            markerType=\"symbol\"\n          />\n          {(hoveredTreeID ||\n            clickedTreeID ||\n            hoveredTreeID === 0 ||\n            clickedTreeID === 0) && (\n            <TreePopUp\n              isClicked={clickedTreeID || clickedTreeID === 0 ? 1 : 0}\n              hoveredTree={\n                this.state.treeArray[\n                  hoveredTreeID || hoveredTreeID === 0\n                    ? hoveredTreeID\n                    : clickedTreeID\n                ]\n              }\n              getMeThere={true}\n              onCloseButtonClick={this.onCloseButtonClick}\n              onInfoButtonClick={this.onInfoButtonClick}\n            />\n          )}\n        </Map>\n        <TemporaryDrawer\n          wikiDesc={this.state.wikiDesc}\n          thumbnailUrl={this.state.thumbnailUrl}\n          treeName={this.state.clickedTreeName}\n          leftDrawer={this.state.leftDrawer}\n          openDrawer={this.state.openDrawer}\n          toggleDrawer={this.toggleDrawer}\n        />\n      </div>\n    );\n  }\n}\n\nexport default RemarkableTreesMap;\n","import React, { Component } from \"react\";\nimport RemarkableTreesMap from \"./remarkableTreesMap\";\n\nclass Explore extends Component {\n  render() {\n    return (\n      <div>\n        <RemarkableTreesMap />\n      </div>\n    );\n  }\n}\n\nexport default Explore;\n","export async function getCoordinates(address, token) {\n  const response = await fetch(\n    `https://api.mapbox.com/geocoding/v5/mapbox.places/${address}.json?proximity=2.350699,48.852737&access_token=${token}`\n  ); // $bbox=48.964581,2.112012,48.745023,2.581812\n  const responseJson = await response.json();\n\n  return this.setState({\n    longitude: responseJson.features[0].center[0],\n    latitude: responseJson.features[0].center[1],\n    locationAvailable: true,\n  });\n}\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport { token, style } from \"../config.json\";\n// Components\nimport TreePopUp from \"./treePopUp\";\nimport { RegularLink } from \"./linkbuttons\";\nimport TemporaryDrawer from \"./drawer\";\nimport ReactMapboxGl from \"react-mapbox-gl\";\nimport TreeLayer from \"./treeLayer\";\nimport CircularIndeterminate from \"./progress\";\n// Utils\nimport { getCoordinates } from \"../utils/geocode\";\nimport { parisData } from \"../utils/parisData\";\nimport * as mapUtils from \"../utils/map_utils\";\n\nconst Map = ReactMapboxGl({\n  minZoom: 16,\n  maxZoom: 20,\n  accessToken: token,\n});\nconst mapStyle = style;\nconst radius = 100;\nconst flyToOptions = {\n  speed: 0,\n};\n\nclass NearbyTreesMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locationAvailable: false,\n      treeArray: [],\n      treeNamesDict: {},\n      nbTrees: 0,\n      hoveredTreeID: \"\",\n      clickedTreeID: \"\",\n      address: this.props.address ? this.props.address : \"\",\n      latitude: 0,\n      longitude: 0,\n      zoom: [19],\n      openDrawer: false,\n      wikiTreeData: \"\",\n      thumbnailUrl: \"\",\n      wikiDesc: \"\",\n    };\n    this.onTreeHover = mapUtils.onTreeHover.bind(this);\n    this.onTreeEndHover = mapUtils.onTreeEndHover.bind(this);\n    this.onTreeClick = mapUtils.onTreeClick.bind(this);\n    this.onInfoButtonClick = mapUtils.onInfoButtonClick.bind(this);\n    this.onCloseButtonClick = mapUtils.onCloseButtonClick.bind(this);\n    this.toggleDrawer = mapUtils.toggleDrawer.bind(this);\n    this.onMapLoad = mapUtils.onMapLoad.bind(this);\n  }\n\n  locationFound = (position) => {\n    this.setState(\n      {\n        longitude: position.coords.longitude,\n        latitude: position.coords.latitude,\n        locationAvailable: true,\n      },\n      () => {\n        parisData.apply(this, [\n          this.state.latitude,\n          this.state.longitude,\n          radius,\n        ]);\n      }\n    );\n  };\n\n  errorHandler = (err) => {\n    if (err.code === 1) {\n      alert(\"Error: Access is denied!\");\n    } else if (err.code === 2) {\n      alert(\"Error: Position is unavailable!\");\n    }\n  };\n\n  getUserPosition() {\n    if (this.state.address) {\n      getCoordinates.apply(this, [this.state.address, token]).then(() => {\n        parisData.apply(this, [\n          this.state.latitude,\n          this.state.longitude,\n          radius,\n        ]);\n      });\n    } else if (navigator.geolocation) {\n      var options = { timeout: 60000 };\n      navigator.geolocation.getCurrentPosition(\n        this.locationFound,\n        this.errorHandler,\n        options\n      );\n    } else {\n      alert(\n        \"Sorry, browser does not support geolocation and no address was supplied\"\n      );\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.locationAvailable) {\n      parisData.apply(this, [\n        this.state.latitude,\n        this.state.longitude,\n        radius,\n      ]);\n    } else {\n      this.getUserPosition.apply(this);\n    }\n  }\n\n  render() {\n    const mapCenter = [this.state.longitude, this.state.latitude];\n    const zoom = this.state.zoom;\n    const hoveredTreeID = this.state.hoveredTreeID;\n    const clickedTreeID = this.state.clickedTreeID;\n    return this.state.locationAvailable ? (\n      <div>\n        <Map\n          onStyleLoad={this.onMapLoad}\n          style={mapStyle}\n          center={mapCenter}\n          containerStyle={{ width: \"100vw\", height: \"100vh\" }}\n          flyToOptions={flyToOptions}\n          zoom={zoom}\n        >\n          <RegularLink text=\"Accueil\" variant=\"outlined\" to=\"/\">\n            Home\n          </RegularLink>\n          <div\n            style={{\n              position: \"fixed\",\n              top: 20,\n              right: 100,\n            }}\n          >\n            {this.state.nbTrees ? (\n              <ul style={{ listStyle: null }}>\n                {Object.keys(this.state.treeNamesDict).map((item, i) =>\n                  mapUtils.ColorDot(\n                    i,\n                    item,\n                    this.state.treeNamesDict[item][\"color\"]\n                  )\n                )}\n              </ul>\n            ) : (\n              \"Pas d'arbres par ici :(\"\n            )}\n          </div>\n          {Object.keys(this.state.treeNamesDict).map((item, i) => (\n            <TreeLayer\n              key={i}\n              treeType={item}\n              onTreeHover={this.onTreeHover}\n              onTreeEndHover={this.onTreeEndHover}\n              treeIds={this.state.treeNamesDict[item][\"ids\"]}\n              treeArray={this.state.treeArray}\n              onTreeClick={this.onTreeClick}\n              markerType=\"circle\"\n              color={this.state.treeNamesDict[item][\"color\"]}\n            />\n          ))}\n\n          {(hoveredTreeID ||\n            clickedTreeID ||\n            hoveredTreeID === 0 ||\n            clickedTreeID === 0) && (\n            <TreePopUp\n              isClicked={clickedTreeID || clickedTreeID === 0 ? 1 : 0}\n              hoveredTree={\n                this.state.treeArray[\n                  hoveredTreeID || hoveredTreeID === 0\n                    ? hoveredTreeID\n                    : clickedTreeID\n                ]\n              }\n              getMeThere={false}\n              onCloseButtonClick={this.onCloseButtonClick}\n              onInfoButtonClick={this.onInfoButtonClick}\n            />\n          )}\n        </Map>\n        <TemporaryDrawer\n          wikiDesc={this.state.wikiDesc}\n          thumbnailUrl={this.state.thumbnailUrl}\n          leftDrawer={this.state.leftDrawer}\n          openDrawer={this.state.openDrawer}\n          toggleDrawer={this.toggleDrawer}\n        />\n      </div>\n    ) : (\n      <CircularIndeterminate />\n    );\n  }\n}\n\nexport default NearbyTreesMap;\n","import React, { Component } from \"react\";\nimport NearbyTreesMap from \"./nearbyTreesMap\";\n\nclass Explore extends Component {\n  render() {\n    return (\n      <div>\n        <NearbyTreesMap\n          address={\n            this.props.location.state ? this.props.location.state.address : \"\"\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default Explore;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>404</h1>\n        </div>\n        <p>Wow c'est la hess ici ou quoi ?</p>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Route, HashRouter, Switch } from 'react-router-dom'\nimport './index.css'\nimport HomePage from './components/homepage';\nimport Explore from './components/explore';\nimport AroundMe from './components/aroundMe';\nimport NotFound from './notfound';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n    <HashRouter>\n        <div>\n            <Switch>\n                <Route exact path=\"/\" component={HomePage} />\n                <Route path=\"/explore\" component={Explore} />\n                <Route path=\"/around-me\" component={AroundMe} />\n                <Route component={NotFound} />\n            </Switch>\n        </div>\n    </HashRouter>\n)\n\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}